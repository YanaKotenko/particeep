{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\nimport { movies$ } from './api';\nimport { GET_MOVIES, DELETE_MOVIE, DISLIKE_MOVIE, LIKE_MOVIE } from './const';\nexport const getMovies = () => dispatch => {\n  movies$.then(res => {\n    dispatch({\n      type: GET_MOVIES,\n      moviesList: res\n    });\n  });\n};\nexport const deleteMovie = id => dispatch => {\n  dispatch({\n    type: DELETE_MOVIE,\n    id\n  });\n};\nexport const dislikeMovie = id => dispatch => {\n  dispatch({\n    type: DISLIKE_MOVIE,\n    id\n  });\n};\nexport const likeMovie = id => dispatch => {\n  dispatch({\n    type: LIKE_MOVIE,\n    id\n  });\n}; // const initialState = {\n//   value: 0,\n//   status: 'idle',\n//   moviesList: [],\n// };\n// export const counterSlice = createSlice({\n//   name: 'counter',\n//   initialState,\n//   reducers: {\n//     increment: (state) => {\n//       state.value += 1;\n//     },\n//     decrement: (state) => {\n//       state.value -= 1;\n//     },\n//     incrementByAmount: (state, action) => {\n//       state.value += action.payload;\n//     },\n//     setMovies: (state, action) => {\n//       state.moviesList = action.payload;\n//     },\n//   },\n// });\n// export const { increment, decrement, incrementByAmount, setMovies } = counterSlice.actions;\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n// export const selectCount = (state) => state.counter.value;\n// export const moviesStore = (state) => state.counter;\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n// export const deleteMovie = (id) => (dispatch, getState) => {\n//   const currentState = moviesStore(getState());\n//   console.log(currentState);\n//   const filtered = currentState.moviesList.filter((movie) => movie.id !== id);\n//   console.log('filtered', filtered);\n//   dispatch(setMovies(filtered));\n// };\n// export default counterSlice.reducer;","map":{"version":3,"sources":["/Users/y.kotenko/Desktop/particeep/src/store/actions.js"],"names":["movies$","GET_MOVIES","DELETE_MOVIE","DISLIKE_MOVIE","LIKE_MOVIE","getMovies","dispatch","then","res","type","moviesList","deleteMovie","id","dislikeMovie","likeMovie"],"mappings":"AAAA;AACA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,aAAnC,EAAkDC,UAAlD,QAAoE,SAApE;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAD,IAAc;AAC3CN,EAAAA,OAAO,CAACO,IAAR,CAAcC,GAAD,IAAS;AACpBF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAER,UAAR;AAAoBS,MAAAA,UAAU,EAAEF;AAAhC,KAAD,CAAR;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,MAAMG,WAAW,GAAIC,EAAD,IAASN,QAAD,IAAc;AAC/CA,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEP,YAAR;AAAsBU,IAAAA;AAAtB,GAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAID,EAAD,IAASN,QAAD,IAAc;AAChDA,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEN,aAAR;AAAuBS,IAAAA;AAAvB,GAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAME,SAAS,GAAIF,EAAD,IAASN,QAAD,IAAc;AAC7CA,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEL,UAAR;AAAoBQ,IAAAA;AAApB,GAAD,CAAR;AACD,CAFM,C,CAIP;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\nimport { movies$ } from './api';\nimport { GET_MOVIES, DELETE_MOVIE, DISLIKE_MOVIE, LIKE_MOVIE } from './const';\n\nexport const getMovies = () => (dispatch) => {\n  movies$.then((res) => {\n    dispatch({ type: GET_MOVIES, moviesList: res });\n  });\n};\n\nexport const deleteMovie = (id) => (dispatch) => {\n  dispatch({ type: DELETE_MOVIE, id });\n};\n\nexport const dislikeMovie = (id) => (dispatch) => {\n  dispatch({ type: DISLIKE_MOVIE, id });\n};\n\nexport const likeMovie = (id) => (dispatch) => {\n  dispatch({ type: LIKE_MOVIE, id });\n};\n\n// const initialState = {\n//   value: 0,\n//   status: 'idle',\n//   moviesList: [],\n// };\n\n// export const counterSlice = createSlice({\n//   name: 'counter',\n//   initialState,\n//   reducers: {\n//     increment: (state) => {\n//       state.value += 1;\n//     },\n//     decrement: (state) => {\n//       state.value -= 1;\n//     },\n//     incrementByAmount: (state, action) => {\n//       state.value += action.payload;\n//     },\n//     setMovies: (state, action) => {\n//       state.moviesList = action.payload;\n//     },\n//   },\n// });\n\n// export const { increment, decrement, incrementByAmount, setMovies } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n// export const selectCount = (state) => state.counter.value;\n// export const moviesStore = (state) => state.counter;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n// export const deleteMovie = (id) => (dispatch, getState) => {\n//   const currentState = moviesStore(getState());\n//   console.log(currentState);\n//   const filtered = currentState.moviesList.filter((movie) => movie.id !== id);\n//   console.log('filtered', filtered);\n//   dispatch(setMovies(filtered));\n// };\n\n// export default counterSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}