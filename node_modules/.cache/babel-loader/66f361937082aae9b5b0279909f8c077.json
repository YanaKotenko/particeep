{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\nimport { movies$ } from './api';\nimport { GET_MOVIES$ } from './const'; // const initialState = {\n//   value: 0,\n//   status: 'idle',\n//   moviesList: [],\n// };\n// export const counterSlice = createSlice({\n//   name: 'counter',\n//   initialState,\n//   reducers: {\n//     increment: (state) => {\n//       state.value += 1;\n//     },\n//     decrement: (state) => {\n//       state.value -= 1;\n//     },\n//     incrementByAmount: (state, action) => {\n//       state.value += action.payload;\n//     },\n//     setMovies: (state, action) => {\n//       state.moviesList = action.payload;\n//     },\n//   },\n// });\n// export const { increment, decrement, incrementByAmount, setMovies } = counterSlice.actions;\n\nexport const getMovies = () => dispatch => {\n  movies$.then(res => {\n    // dispatch(setMovies(res));\n    dispatch({\n      type: GET_MOVIES,\n      moviesList: res\n    });\n  });\n}; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n// export const selectCount = (state) => state.counter.value;\n// export const moviesStore = (state) => state.counter;\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n// export const deleteMovie = (id) => (dispatch, getState) => {\n//   const currentState = moviesStore(getState());\n//   console.log(currentState);\n//   const filtered = currentState.moviesList.filter((movie) => movie.id !== id);\n//   console.log('filtered', filtered);\n//   dispatch(setMovies(filtered));\n// };\n// export default counterSlice.reducer;","map":{"version":3,"sources":["/Users/y.kotenko/Desktop/particeep/src/store/actions.js"],"names":["movies$","GET_MOVIES$","getMovies","dispatch","then","res","type","GET_MOVIES","moviesList"],"mappings":"AAAA;AACA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,QAA4B,SAA5B,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAD,IAAc;AAC3CH,EAAAA,OAAO,CAACI,IAAR,CAAcC,GAAD,IAAS;AACpB;AACAF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEC,UAAR;AAAoBC,MAAAA,UAAU,EAAEH;AAAhC,KAAD,CAAR;AACD,GAHD;AAID,CALM,C,CAOP;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\nimport { movies$ } from './api';\nimport { GET_MOVIES$ } from './const';\n\n// const initialState = {\n//   value: 0,\n//   status: 'idle',\n//   moviesList: [],\n// };\n\n// export const counterSlice = createSlice({\n//   name: 'counter',\n//   initialState,\n//   reducers: {\n//     increment: (state) => {\n//       state.value += 1;\n//     },\n//     decrement: (state) => {\n//       state.value -= 1;\n//     },\n//     incrementByAmount: (state, action) => {\n//       state.value += action.payload;\n//     },\n//     setMovies: (state, action) => {\n//       state.moviesList = action.payload;\n//     },\n//   },\n// });\n\n// export const { increment, decrement, incrementByAmount, setMovies } = counterSlice.actions;\n\nexport const getMovies = () => (dispatch) => {\n  movies$.then((res) => {\n    // dispatch(setMovies(res));\n    dispatch({ type: GET_MOVIES, moviesList: res });\n  });\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n// export const selectCount = (state) => state.counter.value;\n// export const moviesStore = (state) => state.counter;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n// export const deleteMovie = (id) => (dispatch, getState) => {\n//   const currentState = moviesStore(getState());\n//   console.log(currentState);\n//   const filtered = currentState.moviesList.filter((movie) => movie.id !== id);\n//   console.log('filtered', filtered);\n//   dispatch(setMovies(filtered));\n// };\n\n// export default counterSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}