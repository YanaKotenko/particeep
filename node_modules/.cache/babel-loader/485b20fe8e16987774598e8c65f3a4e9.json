{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { movies$ } from './api';\nconst initialState = {\n  value: 0,\n  status: 'idle',\n  moviesList: []\n};\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n    setMovies: (state, action) => {\n      state.moviesList = action.payload;\n    },\n    deleteMovieFromList: (state, action) => {\n      state.moviesList = action.payload;\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  setMovies,\n  deleteMovieFromList\n} = counterSlice.actions;\nexport const getMovies = () => dispatch => {\n  movies$.then(res => {\n    dispatch(setMovies(res));\n  });\n};\nexport const deleteMovie = id => dispatch => {\n  dispatch(deleteMovieFromList(id));\n}; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value;\nexport const moviesStore = state => state.counter; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/y.kotenko/Desktop/particeep/src/store/actions.js"],"names":["createSlice","movies$","initialState","value","status","moviesList","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","setMovies","deleteMovieFromList","actions","getMovies","dispatch","then","res","deleteMovie","id","selectCount","counter","moviesStore","incrementIfOdd","amount","getState","currentValue","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,MAAM,EAAE,MAFW;AAGnBC,EAAAA,UAAU,EAAE;AAHO,CAArB;AAMA,OAAO,MAAMC,YAAY,GAAGN,WAAW,CAAC;AACtCO,EAAAA,IAAI,EAAE,SADgC;AAEtCL,EAAAA,YAFsC;AAGtCM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACP,KAAN,IAAe,CAAf;AACD,KAHO;AAIRQ,IAAAA,SAAS,EAAGD,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACP,KAAN,IAAe,CAAf;AACD,KANO;AAORS,IAAAA,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACpCH,MAAAA,KAAK,CAACP,KAAN,IAAeU,MAAM,CAACC,OAAtB;AACD,KATO;AAURC,IAAAA,SAAS,EAAE,CAACL,KAAD,EAAQG,MAAR,KAAmB;AAC5BH,MAAAA,KAAK,CAACL,UAAN,GAAmBQ,MAAM,CAACC,OAA1B;AACD,KAZO;AAaRE,IAAAA,mBAAmB,EAAE,CAACN,KAAD,EAAQG,MAAR,KAAmB;AACtCH,MAAAA,KAAK,CAACL,UAAN,GAAmBQ,MAAM,CAACC,OAA1B;AACD;AAfO;AAH4B,CAAD,CAAhC;AAsBP,OAAO,MAAM;AAAEL,EAAAA,SAAF;AAAaE,EAAAA,SAAb;AAAwBC,EAAAA,iBAAxB;AAA2CG,EAAAA,SAA3C;AAAsDC,EAAAA;AAAtD,IAA8EV,YAAY,CAACW,OAAjG;AAEP,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAD,IAAc;AAC3ClB,EAAAA,OAAO,CAACmB,IAAR,CAAcC,GAAD,IAAS;AACpBF,IAAAA,QAAQ,CAACJ,SAAS,CAACM,GAAD,CAAV,CAAR;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAIC,EAAD,IAASJ,QAAD,IAAc;AAC/CA,EAAAA,QAAQ,CAACH,mBAAmB,CAACO,EAAD,CAApB,CAAR;AACD,CAFM,C,CAIP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAId,KAAD,IAAWA,KAAK,CAACe,OAAN,CAActB,KAA7C;AACP,OAAO,MAAMuB,WAAW,GAAIhB,KAAD,IAAWA,KAAK,CAACe,OAArC,C,CAEP;AACA;;AACA,OAAO,MAAME,cAAc,GAAIC,MAAD,IAAY,CAACT,QAAD,EAAWU,QAAX,KAAwB;AAChE,QAAMC,YAAY,GAAGN,WAAW,CAACK,QAAQ,EAAT,CAAhC;;AACA,MAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;AAC1BX,IAAAA,QAAQ,CAACP,iBAAiB,CAACgB,MAAD,CAAlB,CAAR;AACD;AACF,CALM;AAOP,eAAetB,YAAY,CAACyB,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { movies$ } from './api';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n  moviesList: [],\n};\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n    setMovies: (state, action) => {\n      state.moviesList = action.payload;\n    },\n    deleteMovieFromList: (state, action) => {\n      state.moviesList = action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount, setMovies, deleteMovieFromList } = counterSlice.actions;\n\nexport const getMovies = () => (dispatch) => {\n  movies$.then((res) => {\n    dispatch(setMovies(res));\n  });\n};\n\nexport const deleteMovie = (id) => (dispatch) => {\n  dispatch(deleteMovieFromList(id));\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\nexport const moviesStore = (state) => state.counter;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}