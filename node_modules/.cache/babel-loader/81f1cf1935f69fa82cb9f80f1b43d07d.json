{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\nimport { movies$ } from './api'; // const initialState = {\n//   value: 0,\n//   status: 'idle',\n//   moviesList: [],\n// };\n// export const counterSlice = createSlice({\n//   name: 'counter',\n//   initialState,\n//   reducers: {\n//     increment: (state) => {\n//       state.value += 1;\n//     },\n//     decrement: (state) => {\n//       state.value -= 1;\n//     },\n//     incrementByAmount: (state, action) => {\n//       state.value += action.payload;\n//     },\n//     setMovies: (state, action) => {\n//       state.moviesList = action.payload;\n//     },\n//   },\n// });\n// export const { increment, decrement, incrementByAmount, setMovies } = counterSlice.actions;\n\nexport const getMovies = () => dispatch => {\n  movies$.then(res => {\n    // dispatch(setMovies(res));\n    dispatch({\n      type: 'GET_MOVIES',\n      moviesList: res\n    });\n  });\n}; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value;\nexport const moviesStore = state => state.counter; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport const deleteMovie = id => (dispatch, getState) => {\n  const currentState = moviesStore(getState());\n  console.log(currentState);\n  const filtered = currentState.moviesList.filter(movie => movie.id !== id);\n  console.log('filtered', filtered);\n  dispatch(setMovies(filtered));\n};\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/y.kotenko/Desktop/particeep/src/store/actions.js"],"names":["movies$","getMovies","dispatch","then","res","type","moviesList","selectCount","state","counter","value","moviesStore","incrementIfOdd","amount","getState","currentValue","incrementByAmount","deleteMovie","id","currentState","console","log","filtered","filter","movie","setMovies","counterSlice","reducer"],"mappings":"AAAA;AACA,SAASA,OAAT,QAAwB,OAAxB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAD,IAAc;AAC3CF,EAAAA,OAAO,CAACG,IAAR,CAAcC,GAAD,IAAS;AACpB;AACAF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,UAAU,EAAEF;AAAlC,KAAD,CAAR;AACD,GAHD;AAID,CALM,C,CAOP;AACA;AACA;;AACA,OAAO,MAAMG,WAAW,GAAIC,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcC,KAA7C;AACP,OAAO,MAAMC,WAAW,GAAIH,KAAD,IAAWA,KAAK,CAACC,OAArC,C,CAEP;AACA;;AACA,OAAO,MAAMG,cAAc,GAAIC,MAAD,IAAY,CAACX,QAAD,EAAWY,QAAX,KAAwB;AAChE,QAAMC,YAAY,GAAGR,WAAW,CAACO,QAAQ,EAAT,CAAhC;;AACA,MAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;AAC1Bb,IAAAA,QAAQ,CAACc,iBAAiB,CAACH,MAAD,CAAlB,CAAR;AACD;AACF,CALM;AAMP,OAAO,MAAMI,WAAW,GAAIC,EAAD,IAAQ,CAAChB,QAAD,EAAWY,QAAX,KAAwB;AACzD,QAAMK,YAAY,GAAGR,WAAW,CAACG,QAAQ,EAAT,CAAhC;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACA,QAAMG,QAAQ,GAAGH,YAAY,CAACb,UAAb,CAAwBiB,MAAxB,CAAgCC,KAAD,IAAWA,KAAK,CAACN,EAAN,KAAaA,EAAvD,CAAjB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBC,QAAxB;AACApB,EAAAA,QAAQ,CAACuB,SAAS,CAACH,QAAD,CAAV,CAAR;AACD,CANM;AAQP,eAAeI,YAAY,CAACC,OAA5B","sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\nimport { movies$ } from './api';\n\n// const initialState = {\n//   value: 0,\n//   status: 'idle',\n//   moviesList: [],\n// };\n\n// export const counterSlice = createSlice({\n//   name: 'counter',\n//   initialState,\n//   reducers: {\n//     increment: (state) => {\n//       state.value += 1;\n//     },\n//     decrement: (state) => {\n//       state.value -= 1;\n//     },\n//     incrementByAmount: (state, action) => {\n//       state.value += action.payload;\n//     },\n//     setMovies: (state, action) => {\n//       state.moviesList = action.payload;\n//     },\n//   },\n// });\n\n// export const { increment, decrement, incrementByAmount, setMovies } = counterSlice.actions;\n\nexport const getMovies = () => (dispatch) => {\n  movies$.then((res) => {\n    // dispatch(setMovies(res));\n    dispatch({ type: 'GET_MOVIES', moviesList: res });\n  });\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\nexport const moviesStore = (state) => state.counter;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport const deleteMovie = (id) => (dispatch, getState) => {\n  const currentState = moviesStore(getState());\n  console.log(currentState);\n  const filtered = currentState.moviesList.filter((movie) => movie.id !== id);\n  console.log('filtered', filtered);\n  dispatch(setMovies(filtered));\n};\n\nexport default counterSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}